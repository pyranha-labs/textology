[project]
name = "textology"
description = "Textual extensions for creating Terminal User Interfaces"
readme = "README.md"
dynamic = ["version", "dependencies", "optional-dependencies"]
authors = [
    { name = "David Fritz" },
]
requires-python = ">=3.10"
license = { text = "MIT" }
keywords = ["cli", "tui", "widgets"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Widget Sets",
    "Typing :: Typed",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows :: Windows 10",
    "Operating System :: Microsoft :: Windows :: Windows 11",
    "Operating System :: POSIX :: Linux",
]

[project.urls]
Home = "https://github.com/pyranha-labs/textology"
Changelog = "https://github.com/pyranha-labs/textology/releases"
Issues = "https://github.com/pyranha-labs/textology/issues"

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true
packages = { find = { where = ["."], include = ["textology*"], exclude = ["*test", "tests*"] } }
platforms = [
    "MacOS",
    "Linux",
    "Windows",
]

[tool.setuptools.dynamic]
version = { attr = "textology.__version__" }
readme = { file = ["README.md"] }
dependencies = { file = ["requirements.txt"] }

[tool.setuptools.dynamic.optional-dependencies]
dev = { file = ["requirements-dev.txt"] }

[tool.bandit]
exclude_dirs = [
    ".venv",
    "venv",
    "test",
]
targets = [
    "textology",
    "examples",
]

[tool.coverage.report]
fail_under = 85

[tool.coverage.run]
branch = true

[tool.pydocstyle]
convention = "google"
match-dir = '^(?!\.|venv).*'
# PEP257 "D204 1 blank line after class docstring" is inconsistent depending on pydocstyle version. Add for consistency.
add-select = "D204"

[tool.pylint]
# Pylint requires a full list of disables, or a full list of includes, and cannot be partially overridden.
# The following list starts with the pylint defaults, followed by project specifics.
# Do not modify the pylint defaults without adding a comment as to why, and only comment out instead of remove.
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    # Textology specific modifications.
    # W1203, allow f-strings to be used in logging messages.
    "logging-fstring-interpolation",
    # C0301 line too long, up to maintainers' best judgement.
    "line-too-long",
    # R0801 duplicate code, up to maintainers' best judgement.
    "duplicate-code",
    # R0903 too-few-public-methods, custom classes are allowed to have low amount of public functions.
    "too-few-public-methods",
]

[tool.pylint.MASTER]
# Skip test files from lint to avoid littering with unecessary ignores.
# Test files are known to perform logic that is often non-standard in order to test all scenarios.
ignore = ["test"]
# Use jobs 0 to autodetect CPUs on system for parallel performance.
jobs = 0

[tool.pylint.DESIGN]
# Textual widgets often have between 10-20 arguments for configuration. Increase default maximum for this project
# to reduce littering code, but still encourage any extremes to be manually excluded.
max-args = 10
max-attributes = 10

[tool.pylint.TYPECHECK]
# Add "Extension" as a suffix for mixin style classes, to allow emphasis on Textual extension types.
mixin-class-rgx = ".*[Mm]ixin|.*Extension"

[tool.pylint.VARIABLES]
# The "id" and "type" variables are attributes on some Textual widgets, and should be allowed in subclasses
# to maintain parity.
allowed-redefined-builtins = ["id", "type"]
good-names = ["id"]

[tool.pytest.ini_options]
norecursedirs = [".*", "venv"]
filterwarnings = [
    # Promote all warnings to errors to ensure performance, forwards compatibility, and code quality.
    "error"
]
markers = [
    "parametrize_test_case: Mark test as paramtrized with an object that auto generates values and ids based on type.",
]

[tool.mypy]
ignore_missing_imports = true
warn_unused_configs = true
show_error_codes = true
incremental = false
follow_imports = "skip"
# There is no option for an enable list, so a full disable list must be provided instead.
disable_error_code = [
    "attr-defined",
    "name-defined",
    "call-arg",
    "arg-type",
    "call-overload",
    "valid-type",
    "var-annotated",
    "override",
    "return",
    "return-value",
    "assignment",
    "type-arg",
    "type-var",
    "union-attr",
    "index",
    "operator",
    "list-item",
    "dict-item",
    "typeddict-item",
    "has-type",
    "import",
    "no-redef",
    "func-returns-value",
    "abstract",
    "valid-newtype",
    "str-format",
    "str-bytes-safe",
    "exit-return",
    "no-untyped-call",
    "redundant-cast",
    "comparison-overlap",
    "no-any-unimported",
    "no-any-return",
    "unreachable",
    "name-match",
    "syntax",
    "misc",
]
disallow_untyped_defs = true

# Ruff is currently only used as a replacement for pycodestyle, black, and isort.
# pydocstyle and pylint are used separately to maximize coverage.
[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "I", # isort
    "E", # pycodestyle
    "W", # pycodestyle
    "D", # pydocstyle
]
ignore = [
    # Ignore E402 import not at top of file. Pylint will catch, and we do not want double ignore lines in the code.
    # Ignore E501 line too long. Up to maintainers best judgement.
    # Ignore E722 bare except. Pylint will catch, and we do not want double ignore lines in the code.
    "E402",
    "E501",
    "E722",
    # Ignore D102, Missing docstring in public method. Pylint will catch, and detects overrides properly.
    # Ignore D105, Missing docstring in magic method. Pylint will catch, and detects overrides properly.
    "D102",
    "D105",
]
# Preview required for pycodestyle rules as of ruff 0.2.2.
preview = true

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.pydocstyle]
convention = "google"
